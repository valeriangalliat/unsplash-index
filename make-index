#!/usr/bin/env node

const fs = require('fs')
const util = require('util')

const mkdir = util.promisify(fs.mkdir)
const readFile = util.promisify(fs.readFile)
const writeFile = util.promisify(fs.writeFile)

const log = require('./log')
const TokenManager = require('./token')
const Unsplash = require('./unsplash')

const config = Object.assign({
  index: `${__dirname}/index`
}, require('./config'))

function initIndex () {
  return mkdir(config.index)
    .catch(err => {
      if (err.code !== 'EEXIST') throw err
    })
}

function indexPhoto (photo) {
  const path = `${config.index}/${photo.id}.json`

  return readFile(path, 'utf8')
    .then(JSON.parse)
    .catch(err => {
      if (err.code !== 'ENOENT') throw err
      return null
    })
    .then(existingPhoto => {
      const created = existingPhoto === null
      const updated = !created && existingPhoto.updated_at !== photo.updated_at

      return writeFile(path, JSON.stringify(photo, null, 2))
        .then(() => ({
          created,
          updated,
          state: created ? 'created' : (updated ? 'updated' : 'unchanged')
        }))
    })
}

const logRequest = res =>
  console.log('request', res.request.uri.href, res.statusCode, res.headers['x-request-id'], res.request.headers.Authorization.split(' ').pop(), res.headers['x-ratelimit-limit'], res.headers['x-ratelimit-remaining'])

const logIndex = (id, res) =>
  console.log('index', id, res.state)

const tokenManager = TokenManager(config.applicationIds || [config.applicationId])
const requester = log.wrapRequester(tokenManager.wrapRequester(Unsplash.makeRequester()), logRequest)
const unsplash = Unsplash({ requester })

const crawl = () =>
  unsplash.getRandomPhotos({ count: 30 })
    .catch(err => {
      if (err.response.statusCode === 403) return []
      throw err
    })
    .then(photos => Promise.all(photos.map(photo => {
      return indexPhoto(photo)
        .then(res => logIndex(photo.id, res))
    })))

const crawlRecursive = () =>
  crawl()
    .then(() => crawlRecursive())

initIndex()
  .then(crawlRecursive)
