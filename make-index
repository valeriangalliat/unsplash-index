#!/usr/bin/env node

const fs = require('fs')
const request = require('request-promise')
const parseLinkHeader = require('parse-link-header')
const util = require('util')

const readFile = util.promisify(fs.readFile)
const writeFile = util.promisify(fs.writeFile)
const appendFile = util.promisify(fs.appendFile)

const config = Object.assign({
  stateFile: `${__dirname}/state.json`,
  indexFile: `${__dirname}/index.json`,
  perPage: 30
}, require('./config'))

const getState = stateFile =>
  readFile(stateFile, 'utf8')
    .then(JSON.parse)
    .catch(err => {
      if (err.code === 'ENOENT') return {}
      throw err
    })

const saveState = (stateFile, state) =>
  writeFile(stateFile, JSON.stringify(state, null, 2) + '\n')

const appendPhotos = (indexFile, photos) =>
  appendFile(indexFile, photos.map(JSON.stringify).join('\n') + '\n')

const makeRequest = (config, path, options = {}) => {
  options = Object.assign({
    url: `https://api.unsplash.com/${path}`,
    json: true,
    resolveWithFullResponse: true
  }, options, {
    headers: Object.assign({
      Authorization: `Client-ID ${config.applicationId}`
    }, options.headers)
  })

  const log = res =>
    console.log(res.request.uri.href, res.statusCode, res.headers['x-request-id'])

  return request(options)
    .then(res => {
      log(res)
      return res
    })
    .catch(err => {
      log(err.response)
      throw err
    })
}

const getPhotos = (config, options) =>
  makeRequest(config, 'photos', Object.assign({}, options, { qs: Object.assign({ per_page: config.perPage }, options.qs) }))
    .then(res => ({
      total: res.headers['x-total'],
      perPage: res.headers['x-per-page'],
      rateLimit: {
        limit: res.headers['x-ratelimit-limit'],
        remaining: res.headers['x-ratelimit-remaining']
      },
      requestId: res.headers['x-request-id'],
      link: parseLinkHeader(res.headers.link),
      photos: res.body
    }))

const crawl = (config, state) => {
  const options = state.nextUrl ? { url: state.nextUrl } : {}

  return getPhotos(config, options)
    .then(res => appendPhotos(config.indexFile, res.photos).then(() => res))
    .then(res => Object.assign({}, state, {
      nextUrl: res.link.next.url
    }))
}

const crawlRecursive = (config, state) =>
  crawl(config, state)
    .then(state => saveState(config.stateFile, state).then(() => state))
    .then(state => crawlRecursive(config, state))

getState(config.stateFile)
  .then(state => crawlRecursive(config, state))
